[[plugins-outputs-stdout]]
=== stdout



A simple output which prints to the STDOUT of the shell running
Logstash. This output can be quite convenient when debugging
plugin configurations, by allowing instant access to the event
data after it has passed through the inputs and filters.

For example, the following output configuration, in conjunction with the
Logstash `-e` command-line flag, will allow you to see the results
of your event pipeline for quick iteration. 
[source,ruby]
    output {
      stdout {}
    }

Useful codecs include:

`rubydebug`: outputs event data using the ruby "awesome_print"
http://rubygems.org/gems/awesome_print[library]

[source,ruby]
    output {
      stdout { codec => rubydebug }
    }

`json`: outputs event data in structured JSON format
[source,ruby]
    output {
      stdout { codec => json }
    }


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
stdout {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-outputs-stdout-codec>> |<<codec,codec>>|No|`"line"`
| <<plugins-outputs-stdout-workers>> |<<number,number>>|No|`1`
|=======================================================================



==== Details

&nbsp;

[[plugins-outputs-stdout-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"line"`

The codec used for output data. Output codecs are a convenient method for encoding your data before it leaves the output, without needing a separate filter in your Logstash pipeline.

[[plugins-outputs-stdout-workers]]
===== `workers` 

  * Value type is <<number,number>>
  * Default value is `1`

The number of workers to use for this output.
Note that this setting may not be useful for all outputs.


