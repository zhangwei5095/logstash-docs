[[plugins-outputs-exec]]
=== exec



This output will run a command for any matching event.
Example:
[source,ruby]
    output {
      exec {
        type => abuse
        command => "iptables -A INPUT -s %{clientip} -j DROP"
      }
    }

Run subprocesses via system ruby function

WARNING: if you want it non-blocking you should use & or dtach or other such
techniques

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
exec {
    command => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-outputs-exec-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-outputs-exec-command>> |<<string,string>>|Yes|
| <<plugins-outputs-exec-workers>> |<<number,number>>|No|`1`
|=======================================================================



==== Details

&nbsp;

[[plugins-outputs-exec-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for output data. Output codecs are a convenient method for encoding your data before it leaves the output, without needing a separate filter in your Logstash pipeline.

[[plugins-outputs-exec-command]]
===== `command` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Command line to execute via subprocess. Use dtach or screen to make it non blocking

[[plugins-outputs-exec-workers]]
===== `workers` 

  * Value type is <<number,number>>
  * Default value is `1`

The number of workers to use for this output.
Note that this setting may not be useful for all outputs.


