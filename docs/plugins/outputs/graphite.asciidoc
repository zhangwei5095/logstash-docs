[[plugins-outputs-graphite]]
=== graphite



This output allows you to pull metrics from your logs and ship them to
Graphite. Graphite is an open source tool for storing and graphing metrics.

An example use case: Some applications emit aggregated stats in the logs
every 10 seconds. Using the grok filter and this output, it is possible to
capture the metric values from the logs and emit them to Graphite.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
graphite {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-outputs-graphite-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-outputs-graphite-exclude_metrics>> |<<array,array>>|No|`["%{[^}]+}"]`
| <<plugins-outputs-graphite-fields_are_metrics>> |<<boolean,boolean>>|No|`false`
| <<plugins-outputs-graphite-host>> |<<string,string>>|No|`"localhost"`
| <<plugins-outputs-graphite-include_metrics>> |<<array,array>>|No|`[".*"]`
| <<plugins-outputs-graphite-metrics>> |<<hash,hash>>|No|`{}`
| <<plugins-outputs-graphite-metrics_format>> |<<string,string>>|No|`"*"`
| <<plugins-outputs-graphite-nested_object_separator>> |<<string,string>>|No|`"."`
| <<plugins-outputs-graphite-port>> |<<number,number>>|No|`2003`
| <<plugins-outputs-graphite-reconnect_interval>> |<<number,number>>|No|`2`
| <<plugins-outputs-graphite-resend_on_failure>> |<<boolean,boolean>>|No|`false`
| <<plugins-outputs-graphite-timestamp_field>> |<<string,string>>|No|`"@timestamp"`
| <<plugins-outputs-graphite-workers>> |<<number,number>>|No|`1`
|=======================================================================



==== Details

&nbsp;

[[plugins-outputs-graphite-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for output data. Output codecs are a convenient method for encoding your data before it leaves the output, without needing a separate filter in your Logstash pipeline.

[[plugins-outputs-graphite-debug]]
===== `debug`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<boolean,boolean>>
  * Default value is `false`

Enable debug output.

[[plugins-outputs-graphite-exclude_metrics]]
===== `exclude_metrics` 

  * Value type is <<array,array>>
  * Default value is `["%{[^}]+}"]`

Exclude regex matched metric names, by default exclude unresolved %{field} strings.

[[plugins-outputs-graphite-fields_are_metrics]]
===== `fields_are_metrics` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

An array indicating that these event fields should be treated as metrics
and will be sent verbatim to Graphite. You may use either `fields_are_metrics`
or `metrics`, but not both.

[[plugins-outputs-graphite-host]]
===== `host` 

  * Value type is <<string,string>>
  * Default value is `"localhost"`

The hostname or IP address of the Graphite server.

[[plugins-outputs-graphite-include_metrics]]
===== `include_metrics` 

  * Value type is <<array,array>>
  * Default value is `[".*"]`

Include only regex matched metric names.

[[plugins-outputs-graphite-metrics]]
===== `metrics` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

The metric(s) to use. This supports dynamic strings like %{host}
for metric names and also for values. This is a hash field with key
being the metric name, value being the metric value. Example:
[source,ruby]
    metrics => { "%{host}/uptime" => "%{uptime_1m}" }

The value will be coerced to a floating point value. Values which cannot be
coerced will be set to zero (0). You may use either `metrics` or `fields_are_metrics`,
but not both.

[[plugins-outputs-graphite-metrics_format]]
===== `metrics_format` 

  * Value type is <<string,string>>
  * Default value is `"*"`

Defines the format of the metric string. The placeholder '*' will be
replaced with the name of the actual metric.
[source,ruby]
    metrics_format => "foo.bar.*.sum"

NOTE: If no metrics_format is defined, the name of the metric will be used as fallback.

[[plugins-outputs-graphite-nested_object_separator]]
===== `nested_object_separator` 

  * Value type is <<string,string>>
  * Default value is `"."`

When hashes are passed in as values they are broken out into a dotted notation
For instance if you configure this plugin with
# [source,ruby]
    metrics => "mymetrics"

and "mymetrics" is a nested hash of '{a => 1, b => { c => 2 }}'
this plugin will generate two metrics: a => 1, and b.c => 2 .
If you've specified a 'metrics_format' it will respect that,
but you still may want control over the separator within these nested key names.
This config setting changes the separator from the '.' default.

[[plugins-outputs-graphite-port]]
===== `port` 

  * Value type is <<number,number>>
  * Default value is `2003`

The port to connect to on the Graphite server.

[[plugins-outputs-graphite-reconnect_interval]]
===== `reconnect_interval` 

  * Value type is <<number,number>>
  * Default value is `2`

Interval between reconnect attempts to Carbon.

[[plugins-outputs-graphite-resend_on_failure]]
===== `resend_on_failure` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Should metrics be resent on failure?

[[plugins-outputs-graphite-timestamp_field]]
===== `timestamp_field` 

  * Value type is <<string,string>>
  * Default value is `"@timestamp"`

Use this field for the timestamp instead of '@timestamp' which is the
default. Useful when backfilling or just getting more accurate data into
graphite since you probably have a cache layer infront of Logstash.

[[plugins-outputs-graphite-workers]]
===== `workers` 

  * Value type is <<number,number>>
  * Default value is `1`

The number of workers to use for this output.
Note that this setting may not be useful for all outputs.


