[[plugins-outputs-google_cloud_storage]]
=== google_cloud_storage


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-output-google_cloud_storage`.


Author: Rodrigo De Castro <rdc@google.com>
Date: 2013-09-20

Copyright 2013 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Summary: plugin to upload log events to Google Cloud Storage (GCS), rolling
files based on the date pattern provided as a configuration setting. Events
are written to files locally and, once file is closed, this plugin uploads
it to the configured bucket.

For more info on Google Cloud Storage, please go to:
https://cloud.google.com/products/cloud-storage

In order to use this plugin, a Google service account must be used. For
more information, please refer to:
https://developers.google.com/storage/docs/authentication#service_accounts

Recommendation: experiment with the settings depending on how much log
data you generate, so the uploader can keep up with the generated logs.
Using gzip output can be a good option to reduce network traffic when
uploading the log files and in terms of storage costs as well.

USAGE:
This is an example of logstash config:

output {
   google_cloud_storage {
     bucket => "my_bucket"                                     (required)
     key_path => "/path/to/privatekey.p12"                     (required)
     key_password => "notasecret"                              (optional)
     service_account => "1234@developer.gserviceaccount.com"   (required)
     temp_directory => "/tmp/logstash-gcs"                     (optional)
     log_file_prefix => "logstash_gcs"                         (optional)
     max_file_size_kbytes => 1024                              (optional)
     output_format => "plain"                                  (optional)
     date_pattern => "%Y-%m-%dT%H:00"                          (optional)
     flush_interval_secs => 2                                  (optional)
     gzip => false                                             (optional)
     uploader_interval_secs => 60                              (optional)
   }
}

Improvements TODO list:
- Support logstash event variables to determine filename.
- Turn Google API code into a Plugin Mixin (like AwsConfig).
- There's no recover method, so if logstash/plugin crashes, files may not
be uploaded to GCS.
- Allow user to configure file name.
- Allow parallel uploads for heavier loads (+ connection configuration if
exposed by Ruby API client)

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
google_cloud_storage {
    bucket => ...
    key_path => ...
    service_account => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-outputs-google_cloud_storage-bucket>> |<<string,string>>|Yes|
| <<plugins-outputs-google_cloud_storage-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-outputs-google_cloud_storage-date_pattern>> |<<string,string>>|No|`"%Y-%m-%dT%H:00"`
| <<plugins-outputs-google_cloud_storage-flush_interval_secs>> |<<number,number>>|No|`2`
| <<plugins-outputs-google_cloud_storage-gzip>> |<<boolean,boolean>>|No|`false`
| <<plugins-outputs-google_cloud_storage-key_password>> |<<string,string>>|No|`"notasecret"`
| <<plugins-outputs-google_cloud_storage-key_path>> |<<string,string>>|Yes|
| <<plugins-outputs-google_cloud_storage-log_file_prefix>> |<<string,string>>|No|`"logstash_gcs"`
| <<plugins-outputs-google_cloud_storage-max_file_size_kbytes>> |<<number,number>>|No|`10000`
| <<plugins-outputs-google_cloud_storage-output_format>> |<<string,string>>, one of `["json", "plain"]`|No|`"plain"`
| <<plugins-outputs-google_cloud_storage-service_account>> |<<string,string>>|Yes|
| <<plugins-outputs-google_cloud_storage-temp_directory>> |<<string,string>>|No|`""`
| <<plugins-outputs-google_cloud_storage-uploader_interval_secs>> |<<number,number>>|No|`60`
| <<plugins-outputs-google_cloud_storage-workers>> |<<number,number>>|No|`1`
|=======================================================================



==== Details

&nbsp;

[[plugins-outputs-google_cloud_storage-bucket]]
===== `bucket` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

GCS bucket name, without "gs://" or any other prefix.

[[plugins-outputs-google_cloud_storage-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for output data. Output codecs are a convenient method for encoding your data before it leaves the output, without needing a separate filter in your Logstash pipeline.

[[plugins-outputs-google_cloud_storage-date_pattern]]
===== `date_pattern` 

  * Value type is <<string,string>>
  * Default value is `"%Y-%m-%dT%H:00"`

Time pattern for log file, defaults to hourly files.
Must Time.strftime patterns: www.ruby-doc.org/core-2.0/Time.html#method-i-strftime

[[plugins-outputs-google_cloud_storage-flush_interval_secs]]
===== `flush_interval_secs` 

  * Value type is <<number,number>>
  * Default value is `2`

Flush interval in seconds for flushing writes to log files. 0 will flush
on every message.

[[plugins-outputs-google_cloud_storage-gzip]]
===== `gzip` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Gzip output stream when writing events to log files.

[[plugins-outputs-google_cloud_storage-key_password]]
===== `key_password` 

  * Value type is <<string,string>>
  * Default value is `"notasecret"`

GCS private key password.

[[plugins-outputs-google_cloud_storage-key_path]]
===== `key_path` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

GCS path to private key file.

[[plugins-outputs-google_cloud_storage-log_file_prefix]]
===== `log_file_prefix` 

  * Value type is <<string,string>>
  * Default value is `"logstash_gcs"`

Log file prefix. Log file will follow the format:
<prefix>_hostname_date<.part?>.log

[[plugins-outputs-google_cloud_storage-max_file_size_kbytes]]
===== `max_file_size_kbytes` 

  * Value type is <<number,number>>
  * Default value is `10000`

Sets max file size in kbytes. 0 disable max file check.

[[plugins-outputs-google_cloud_storage-output_format]]
===== `output_format` 

  * Value can be any of: `json`, `plain`
  * Default value is `"plain"`

The event format you want to store in files. Defaults to plain text.

[[plugins-outputs-google_cloud_storage-service_account]]
===== `service_account` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

GCS service account.

[[plugins-outputs-google_cloud_storage-temp_directory]]
===== `temp_directory` 

  * Value type is <<string,string>>
  * Default value is `""`

Directory where temporary files are stored.
Defaults to /tmp/logstash-gcs-<random-suffix>

[[plugins-outputs-google_cloud_storage-uploader_interval_secs]]
===== `uploader_interval_secs` 

  * Value type is <<number,number>>
  * Default value is `60`

Uploader interval when uploading new files to GCS. Adjust time based
on your time pattern (for example, for hourly files, this interval can be
around one hour).

[[plugins-outputs-google_cloud_storage-workers]]
===== `workers` 

  * Value type is <<number,number>>
  * Default value is `1`

The number of workers to use for this output.
Note that this setting may not be useful for all outputs.


