[[plugins-filters-collate]]
=== collate


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-collate`.


Collate events by time or count.

The original goal of this filter was to merge the logs from different sources
by the time of log, for example, in real-time log collection, logs can be
collated by amount of 3000 logs or can be collated in 30 seconds.

The config looks like this:
[source,ruby]
    filter {
      collate {
        size => 3000
        interval => "30s"
        order => "ascending"
      }
    }

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
collate {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-collate-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-collate-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-collate-count>> |<<number,number>>|No|`1000`
| <<plugins-filters-collate-interval>> |<<string,string>>|No|`"1m"`
| <<plugins-filters-collate-order>> |<<string,string>>, one of `["ascending", "descending"]`|No|`"ascending"`
| <<plugins-filters-collate-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-collate-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-collate-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-collate-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      collate {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      collate {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-collate-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      collate {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      collate {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-collate-count]]
===== `count` 

  * Value type is <<number,number>>
  * Default value is `1000`

How many logs should be collated.

[[plugins-filters-collate-interval]]
===== `interval` 

  * Value type is <<string,string>>
  * Default value is `"1m"`

The `interval` is the time window which how long the logs should be collated. (default `1m`)

[[plugins-filters-collate-order]]
===== `order` 

  * Value can be any of: `ascending`, `descending`
  * Default value is `"ascending"`

The `order` collated events should appear in.

[[plugins-filters-collate-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-collate-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      collate {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      collate {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-collate-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      collate {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      collate {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


