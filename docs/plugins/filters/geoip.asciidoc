[[plugins-filters-geoip]]
=== geoip



The GeoIP filter adds information about the geographical location of IP addresses, 
based on data from the Maxmind GeoLite2 City Database.

A `[geoip][location]` field is created if
the GeoIP lookup returns a latitude and longitude. The field is stored in
http://geojson.org/geojson-spec.html[GeoJSON] format. Additionally,
the default Elasticsearch template provided with the
<<plugins-outputs-elasticsearch,`elasticsearch` output>> maps
the `[geoip][location]` field to an https://www.elastic.co/guide/en/elasticsearch/reference/1.7/mapping-geo-point-type.html#_mapping_options[Elasticsearch geo_point].

As this field is a `geo_point` _and_ it is still valid GeoJSON, you get
the awesomeness of Elasticsearch's geospatial query, facet and filter functions
and the flexibility of having GeoJSON for all other applications (like Kibana's
map visualization).

Note: This product includes GeoLite2 data created by MaxMind, available from
http://www.maxmind.com. This database is licensed under 
http://creativecommons.org/licenses/by-sa/4.0/[Creative Commons Attribution-ShareAlike 4.0 International License]

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
geoip {
    source => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-geoip-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-geoip-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-database>> |a valid filesystem path|No|
| <<plugins-filters-geoip-fields>> |<<array,array>>|No|
| <<plugins-filters-geoip-lru_cache_size>> |<<number,number>>|No|`1000`
| <<plugins-filters-geoip-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-geoip-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-geoip-source>> |<<string,string>>|Yes|
| <<plugins-filters-geoip-target>> |<<string,string>>|No|`"geoip"`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-geoip-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      geoip {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      geoip {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-geoip-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      geoip {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      geoip {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-geoip-database]]
===== `database` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

Map of lookup caches, keyed by geoip_type
The path to the GeoIP database file which Logstash should use. Country, City, ASN, ISP
and organization databases are supported.

If not specified, this will default to the GeoLite2 City database that ships with Logstash.
Up-to-date databases can be downloaded from here: http://dev.maxmind.com/geoip/geoip2/geolite2/

[[plugins-filters-geoip-fields]]
===== `fields` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

An array of geoip fields to be included in the event.

Possible fields depend on the database type. By default, all geoip fields
are included in the event.

For the built-in GeoLite2 City database, the following are available:
`city_name`, `continent_code`, `country_code2`, `country_code3`, `country_name`,
`dma_code`, `ip`, `latitude`, `longitude`, `postal_code`, `region_name` and `timezone`.

[[plugins-filters-geoip-lru_cache_size]]
===== `lru_cache_size` 

  * Value type is <<number,number>>
  * Default value is `1000`

GeoIP lookup is surprisingly expensive. This filter uses an LRU cache to take advantage of the fact that
IPs agents are often found adjacent to one another in log files and rarely have a random distribution.
The higher you set this the more likely an item is to be in the cache and the faster this filter will run.
However, if you set this too high you can use more memory than desired.

Experiment with different values for this option to find the best performance for your dataset.

This MUST be set to a value > 0. There is really no reason to not want this behavior, the overhead is minimal
and the speed gains are large.

It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter
of the same geoip_type share the same cache. The last declared cache size will 'win'. The reason for this is that there would be no benefit
to having multiple caches for different instances at different points in the pipeline, that would just increase the
number of cache misses and waste memory.

[[plugins-filters-geoip-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-geoip-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      geoip {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      geoip {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-geoip-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      geoip {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      geoip {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-geoip-source]]
===== `source` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The field containing the IP address or hostname to map via geoip. If
this field is an array, only the first value will be used.

[[plugins-filters-geoip-target]]
===== `target` 

  * Value type is <<string,string>>
  * Default value is `"geoip"`

Specify the field into which Logstash should store the geoip data.
This can be useful, for example, if you have `src_ip` and `dst_ip` fields and
would like the GeoIP information of both IPs.

If you save the data to a target field other than `geoip` and want to use the
`geo_point` related functions in Elasticsearch, you need to alter the template
provided with the Elasticsearch output and configure the output to use the
new template.

Even if you don't use the `geo_point` mapping, the `[target][location]` field
is still valid GeoJSON.


