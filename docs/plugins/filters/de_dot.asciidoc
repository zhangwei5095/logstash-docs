[[plugins-filters-de_dot]]
=== de_dot


NOTE: This does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-de_dot`.


This filter _appears_ to rename fields by replacing `.` characters with a different
separator.  In reality, it's a somewhat expensive filter that has to copy the
source field contents to a new destination field (whose name no longer contains
dots), and then remove the corresponding source field.

It should only be used if no other options are available.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
de_dot {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-de_dot-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-de_dot-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-de_dot-fields>> |<<array,array>>|No|
| <<plugins-filters-de_dot-nested>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-de_dot-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-de_dot-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-de_dot-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-de_dot-separator>> |<<string,string>>|No|`"_"`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-de_dot-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      de_dot {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      de_dot {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-de_dot-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      de_dot {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      de_dot {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-de_dot-fields]]
===== `fields` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

The `fields` array should contain a list of known fields to act on.
If undefined, all top-level fields will be checked.  Sub-fields must be
manually specified in the array.  For example: `["field.suffix","[foo][bar.suffix]"]`
will result in "field_suffix" and nested or sub field ["foo"]["bar_suffix"]

WARNING: This is an expensive operation.


[[plugins-filters-de_dot-nested]]
===== `nested` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If `nested` is _true_, then create sub-fields instead of replacing dots with
a different separator.

[[plugins-filters-de_dot-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-de_dot-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      de_dot {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      de_dot {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-de_dot-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      de_dot {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      de_dot {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-de_dot-separator]]
===== `separator` 

  * Value type is <<string,string>>
  * Default value is `"_"`

Replace dots with this value.


