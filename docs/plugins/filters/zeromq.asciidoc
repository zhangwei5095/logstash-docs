[[plugins-filters-zeromq]]
=== zeromq


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-zeromq`.


ZeroMQ filter. This is the best way to send an event externally for filtering
It works much like an exec filter would by sending the event "offsite"
for processing and waiting for a response

The protocol here is:
  * REQ sent with JSON-serialized logstash event
  * REP read expected to be the full JSON 'filtered' event
  * - if reply read is an empty string, it will cancel the event.

Note that this is a limited subset of the zeromq functionality in
inputs and outputs. The only topology that makes sense here is:
REQ/REP. bunde

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
zeromq {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-zeromq-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-zeromq-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-zeromq-add_tag_on_timeout>> |<<string,string>>|No|`"zeromqtimeout"`
| <<plugins-filters-zeromq-address>> |<<string,string>>|No|`"tcp://127.0.0.1:2121"`
| <<plugins-filters-zeromq-field>> |<<string,string>>|No|
| <<plugins-filters-zeromq-mode>> |<<string,string>>, one of `["server", "client"]`|No|`"client"`
| <<plugins-filters-zeromq-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-zeromq-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-zeromq-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-zeromq-retries>> |<<number,number>>|No|`3`
| <<plugins-filters-zeromq-sockopt>> |<<hash,hash>>|No|
| <<plugins-filters-zeromq-timeout>> |<<number,number>>|No|`500`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-zeromq-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      zeromq {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      zeromq {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-zeromq-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      zeromq {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      zeromq {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-zeromq-add_tag_on_timeout]]
===== `add_tag_on_timeout` 

  * Value type is <<string,string>>
  * Default value is `"zeromqtimeout"`

tag to add if zeromq timeout expires before getting back an answer.
If set to "" then no tag will be added.

[[plugins-filters-zeromq-address]]
===== `address` 

  * Value type is <<string,string>>
  * Default value is `"tcp://127.0.0.1:2121"`

0mq socket address to connect or bind
Please note that inproc:// will not work with logstash
as we use a context per thread
By default, filters connect

[[plugins-filters-zeromq-field]]
===== `field` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The field to send off-site for processing
If this is unset, the whole event will be sent

[[plugins-filters-zeromq-mode]]
===== `mode` 

  * Value can be any of: `server`, `client`
  * Default value is `"client"`

0mq mode
server mode binds/listens
client mode connects

[[plugins-filters-zeromq-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-zeromq-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      zeromq {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      zeromq {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-zeromq-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      zeromq {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      zeromq {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-zeromq-retries]]
===== `retries` 

  * Value type is <<number,number>>
  * Default value is `3`

number of retries, used for both sending and receiving messages.
for sending, retries should return instantly.
for receiving, the total blocking time is up to retries X timeout,
which by default is 3 X 500 = 1500ms

[[plugins-filters-zeromq-sockopt]]
===== `sockopt` 

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

0mq socket options
This exposes zmq_setsockopt
for advanced tuning
see http://api.zeromq.org/2-1:zmq-setsockopt for details

This is where you would set values like:
ZMQ::HWM - high water mark
ZMQ::IDENTITY - named queues
ZMQ::SWAP_SIZE - space for disk overflow
ZMQ::SUBSCRIBE - topic filters for pubsub

example: sockopt => ["ZMQ::HWM", 50, "ZMQ::IDENTITY", "my_named_queue"]

[[plugins-filters-zeromq-timeout]]
===== `timeout` 

  * Value type is <<number,number>>
  * Default value is `500`

timeout in milliseconds on which to wait for a reply.


