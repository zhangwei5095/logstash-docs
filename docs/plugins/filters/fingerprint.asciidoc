[[plugins-filters-fingerprint]]
=== fingerprint



 Fingerprint fields using by replacing values with a consistent hash.

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
fingerprint {
    method => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-fingerprint-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-fingerprint-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-fingerprint-base64encode>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-fingerprint-concatenate_sources>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-fingerprint-key>> |<<string,string>>|No|
| <<plugins-filters-fingerprint-method>> |<<string,string>>, one of `["SHA1", "SHA256", "SHA384", "SHA512", "MD5", "MURMUR3", "IPV4_NETWORK", "UUID", "PUNCTUATION"]`|Yes|`"SHA1"`
| <<plugins-filters-fingerprint-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-fingerprint-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-fingerprint-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-fingerprint-source>> |<<array,array>>|No|`"message"`
| <<plugins-filters-fingerprint-target>> |<<string,string>>|No|`"fingerprint"`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-fingerprint-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      fingerprint {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      fingerprint {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-fingerprint-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      fingerprint {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      fingerprint {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-fingerprint-base64encode]]
===== `base64encode` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

When set to 'true', SHA1', 'SHA256', 'SHA384', 'SHA512' and 'MD5' fingerprint methods will be returned
base64 encoded rather than hex encoded.

[[plugins-filters-fingerprint-concatenate_sources]]
===== `concatenate_sources` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

When set to `true`, we concatenate the values of all fields into 1 string like the old checksum filter.

[[plugins-filters-fingerprint-key]]
===== `key` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

When used with `IPV4_NETWORK` method fill in the subnet prefix length
Not required for `MURMUR3` or `UUID` methods
With other methods fill in the `HMAC` key

[[plugins-filters-fingerprint-method]]
===== `method` 

  * This is a required setting.
  * Value can be any of: `SHA1`, `SHA256`, `SHA384`, `SHA512`, `MD5`, `MURMUR3`, `IPV4_NETWORK`, `UUID`, `PUNCTUATION`
  * Default value is `"SHA1"`

Fingerprint method

[[plugins-filters-fingerprint-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-fingerprint-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      fingerprint {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      fingerprint {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-fingerprint-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      fingerprint {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      fingerprint {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-fingerprint-source]]
===== `source` 

  * Value type is <<array,array>>
  * Default value is `"message"`

Source field(s)

[[plugins-filters-fingerprint-target]]
===== `target` 

  * Value type is <<string,string>>
  * Default value is `"fingerprint"`

Target field.
will overwrite current value of a field if it exists.


