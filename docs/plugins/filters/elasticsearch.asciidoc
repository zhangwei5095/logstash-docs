[[plugins-filters-elasticsearch]]
=== elasticsearch


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-filter-elasticsearch`.


Search elasticsearch for a previous log event and copy some fields from it
into the current event.  Below is a complete example of how this filter might
be used.  Whenever logstash receives an "end" event, it uses this elasticsearch
filter to find the matching "start" event based on some operation identifier.
Then it copies the `@timestamp` field from the "start" event into a new field on
the "end" event.  Finally, using a combination of the "date" filter and the
"ruby" filter, we calculate the time duration in hours between the two events.
[source,ruby]
      if [type] == "end" {
         elasticsearch {
            hosts => ["es-server"]
            query => "type:start AND operation:%{[opid]}"
            fields => ["@timestamp", "started"]
         }

         date {
            match => ["[started]", "ISO8601"]
            target => "[started]"
         }

         ruby {
            code => "event['duration_hrs'] = (event['@timestamp'] - event['started']) / 3600 rescue nil"
         }
      }


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
elasticsearch {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-elasticsearch-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-elasticsearch-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-ca_file>> |a valid filesystem path|No|
| <<plugins-filters-elasticsearch-fields>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-elasticsearch-hosts>> |<<array,array>>|No|
| <<plugins-filters-elasticsearch-password>> |<<password,password>>|No|
| <<plugins-filters-elasticsearch-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-elasticsearch-query>> |<<string,string>>|No|
| <<plugins-filters-elasticsearch-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-elasticsearch-sort>> |<<string,string>>|No|`"@timestamp:desc"`
| <<plugins-filters-elasticsearch-ssl>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-elasticsearch-user>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-elasticsearch-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      elasticsearch {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      elasticsearch {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-elasticsearch-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      elasticsearch {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      elasticsearch {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-elasticsearch-ca_file]]
===== `ca_file` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL Certificate Authority file

[[plugins-filters-elasticsearch-fields]]
===== `fields` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Hash of fields to copy from old event (found via elasticsearch) into new event

[[plugins-filters-elasticsearch-hosts]]
===== `hosts` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

List of elasticsearch hosts to use for querying.

[[plugins-filters-elasticsearch-password]]
===== `password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Basic Auth - password

[[plugins-filters-elasticsearch-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-elasticsearch-query]]
===== `query` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Elasticsearch query string

[[plugins-filters-elasticsearch-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      elasticsearch {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      elasticsearch {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-elasticsearch-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      elasticsearch {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      elasticsearch {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-elasticsearch-sort]]
===== `sort` 

  * Value type is <<string,string>>
  * Default value is `"@timestamp:desc"`

Comma-delimited list of `<field>:<direction>` pairs that define the sort order

[[plugins-filters-elasticsearch-ssl]]
===== `ssl` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

SSL

[[plugins-filters-elasticsearch-user]]
===== `user` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Basic Auth - username


