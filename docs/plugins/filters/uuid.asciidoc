[[plugins-filters-uuid]]
=== uuid

The uuid filter allows you to generate a
https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID]
and add it as a field to each processed event.

This is useful if you need to generate a string that's unique for every
event, even if the same input is processed multiple times. If you want
to generate strings that are identical each time a event with a given
content is processed (i.e. a hash) you should use the
<<plugins-filters-fingerprint,fingerprint filter>> instead.

The generated UUIDs follow the version 4 definition in
https://tools.ietf.org/html/rfc4122[RFC 4122]) and will be
represented as a standard hexadecimal string format, e.g.
"e08806fe-02af-406c-bbde-8a5ae4475e57".

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
uuid {
    target => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-uuid-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-uuid-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-overwrite>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-uuid-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-uuid-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-remove_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-uuid-target>> |<<string,string>>|Yes|
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-uuid-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      uuid {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
     You can also add multiple fields at once:
    filter {
      uuid {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-uuid-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      uuid {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
     You can also add multiple tags at once:
    filter {
      uuid {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-uuid-overwrite]]
===== `overwrite` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If the value in the field currently (if any) should be overridden
by the generated UUID. Defaults to `false` (i.e. if the field is
present, with ANY value, it won't be overridden)

Example:
[source,ruby]
   filter {
      uuid {
        target    => "@uuid"
        overwrite => true
      }
   }

[[plugins-filters-uuid-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-uuid-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      uuid {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
     You can also remove multiple fields at once:
    filter {
      uuid {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-uuid-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      uuid {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
     You can also remove multiple tags at once:
    filter {
      uuid {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.

[[plugins-filters-uuid-target]]
===== `target` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a UUID to a field.

Example:
[source,ruby]
    filter {
      uuid {
        target => "@uuid"
      }
    }


