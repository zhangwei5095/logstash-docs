[[plugins-filters-checksum]]
=== checksum

NOTE: This is a community-maintained plugin!

This filter let's you create a checksum based on various parts
of the logstash event.
This can be useful for deduplication of messages or simply to provide
a custom unique identifier.

This is VERY experimental and is largely a proof-of-concept

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
checksum {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-filters-checksum-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-filters-checksum-add_tag>> |<<array,array>>|No|`[]`
| <<plugins-filters-checksum-algorithm>> |<<string,string>>, one of `["md5", "sha", "sha1", "sha256", "sha384"]`|No|`"sha256"`
| <<plugins-filters-checksum-keys>> |<<array,array>>|No|`["message", "@timestamp", "type"]`
| <<plugins-filters-checksum-periodic_flush>> |<<boolean,boolean>>|No|`false`
| <<plugins-filters-checksum-remove_field>> |<<array,array>>|No|`[]`
| <<plugins-filters-checksum-remove_tag>> |<<array,array>>|No|`[]`
|=======================================================================



==== Details

&nbsp;

[[plugins-filters-checksum-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

If this filter is successful, add any arbitrary fields to this event.
Field names can be dynamic and include parts of the event using the `%{field}`.

Example:
[source,ruby]
    filter {
      checksum {
        add_field => { "foo_%{somefield}" => "Hello world, from %{host}" }
      }
    }
[source,ruby]
    # You can also add multiple fields at once:
    filter {
      checksum {
        add_field => {
          "foo_%{somefield}" => "Hello world, from %{host}"
          "new_field" => "new_static_value"
        }
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add field `foo_hello` if it is present, with the
value above and the `%{host}` piece replaced with that value from the
event. The second example would also add a hardcoded field.

[[plugins-filters-checksum-add_tag]]
===== `add_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, add arbitrary tags to the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      checksum {
        add_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also add multiple tags at once:
    filter {
      checksum {
        add_tag => [ "foo_%{somefield}", "taggedy_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would add a tag `foo_hello` (and the second example would of course add a `taggedy_tag` tag).

[[plugins-filters-checksum-algorithm]]
===== `algorithm` 

  * Value can be any of: `md5`, `sha`, `sha1`, `sha256`, `sha384`
  * Default value is `"sha256"`



[[plugins-filters-checksum-keys]]
===== `keys` 

  * Value type is <<array,array>>
  * Default value is `["message", "@timestamp", "type"]`

A list of keys to use in creating the string to checksum
Keys will be sorted before building the string
keys and values will then be concatenated with pipe delimeters
and checksummed

[[plugins-filters-checksum-periodic_flush]]
===== `periodic_flush` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Call the filter flush method at regular interval.
Optional.

[[plugins-filters-checksum-remove_field]]
===== `remove_field` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary fields from this event.
Fields names can be dynamic and include parts of the event using the %{field}
Example:
[source,ruby]
    filter {
      checksum {
        remove_field => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple fields at once:
    filter {
      checksum {
        remove_field => [ "foo_%{somefield}", "my_extraneous_field" ]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the field with name `foo_hello` if it is present. The second
example would remove an additional, non-dynamic field.

[[plugins-filters-checksum-remove_tag]]
===== `remove_tag` 

  * Value type is <<array,array>>
  * Default value is `[]`

If this filter is successful, remove arbitrary tags from the event.
Tags can be dynamic and include parts of the event using the `%{field}`
syntax.

Example:
[source,ruby]
    filter {
      checksum {
        remove_tag => [ "foo_%{somefield}" ]
      }
    }
[source,ruby]
    # You can also remove multiple tags at once:
    filter {
      checksum {
        remove_tag => [ "foo_%{somefield}", "sad_unwanted_tag"]
      }
    }

If the event has field `"somefield" == "hello"` this filter, on success,
would remove the tag `foo_hello` if it is present. The second example
would remove a sad, unwanted tag as well.


