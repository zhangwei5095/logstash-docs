[[plugins-inputs-zeromq]]
=== zeromq

NOTE: This is a community-maintained plugin!

Read events over a 0MQ SUB socket.

You need to have the 0mq 2.1.x library installed to be able to use
this input plugin.

The default settings will create a subscriber binding to `tcp://127.0.0.1:2120` 
waiting for connecting publishers.


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
zeromq {
    topology => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-zeromq-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-zeromq-address>> |<<array,array>>|No|`["tcp://*:2120"]`
| <<plugins-inputs-zeromq-codec>> |<<codec,codec>>|No|`"json"`
| <<plugins-inputs-zeromq-mode>> |<<string,string>>, one of `["server", "client"]`|No|`"server"`
| <<plugins-inputs-zeromq-sender>> |<<string,string>>|No|
| <<plugins-inputs-zeromq-sockopt>> |<<hash,hash>>|No|
| <<plugins-inputs-zeromq-tags>> |<<array,array>>|No|
| <<plugins-inputs-zeromq-topic>> |<<array,array>>|No|
| <<plugins-inputs-zeromq-topology>> |<<string,string>>, one of `["pushpull", "pubsub", "pair"]`|Yes|
| <<plugins-inputs-zeromq-type>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-zeromq-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-zeromq-address]]
===== `address` 

  * Value type is <<array,array>>
  * Default value is `["tcp://*:2120"]`

0mq socket address to connect or bind
Please note that `inproc://` will not work with logstash
as each we use a context per thread.
By default, inputs bind/listen
and outputs connect

[[plugins-inputs-zeromq-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"json"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-zeromq-mode]]
===== `mode` 

  * Value can be any of: `server`, `client`
  * Default value is `"server"`

mode
server mode binds/listens
client mode connects

[[plugins-inputs-zeromq-sender]]
===== `sender` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

sender
overrides the sender to 
set the source of the event
default is `zmq+topology://type/`

[[plugins-inputs-zeromq-sockopt]]
===== `sockopt` 

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

0mq socket options
This exposes `zmq_setsockopt`
for advanced tuning
see http://api.zeromq.org/2-1:zmq-setsockopt for details

This is where you would set values like:

 * `ZMQ::HWM` - high water mark
 * `ZMQ::IDENTITY` - named queues
 * `ZMQ::SWAP_SIZE` - space for disk overflow

example: `sockopt => ["ZMQ::HWM", 50, "ZMQ::IDENTITY", "my_named_queue"]`

[[plugins-inputs-zeromq-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-zeromq-topic]]
===== `topic` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

0mq topic
This is used for the `pubsub` topology only
On inputs, this allows you to filter messages by topic
On outputs, this allows you to tag a message for routing
NOTE: ZeroMQ does subscriber side filtering.
NOTE: All topics have an implicit wildcard at the end
You can specify multiple topics here

[[plugins-inputs-zeromq-topology]]
===== `topology` 

  * This is a required setting.
  * Value can be any of: `pushpull`, `pubsub`, `pair`
  * There is no default value for this setting.

0mq topology
The default logstash topologies work as follows:

* pushpull - inputs are pull, outputs are push
* pubsub - inputs are subscribers, outputs are publishers
* pair - inputs are clients, inputs are servers

If the predefined topology flows don't work for you,
you can change the `mode` setting
TODO (lusis) add req/rep MAYBE
TODO (lusis) add router/dealer

[[plugins-inputs-zeromq-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


