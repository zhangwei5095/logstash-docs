[[plugins-inputs-kafka]]
=== kafka

This input will read events from a Kafka topic. It uses the the newly designed
0.10 version of consumer API provided by Kafka to read messages from the broker.

Here's a compatibility matrix that shows the Kafka broker and client versions that are compatible with each combination
of Logstash and the Kafka input plugin:

[options="header"]
|==========================================================
|Kafka Broker Version |Kafka Client Version |Logstash Version |Plugin Version |Why?
|0.8       |0.8       |2.0.0 - 2.x.x   |<3.0.0 |Legacy, 0.8 is still popular
|0.9       |0.9       |2.0.0 - 2.3.x   | 3.x.x |Works with the old Ruby Event API (`event['product']['price'] = 10`)
|0.9       |0.9       |2.4.0 - 5.0.x   | 4.x.x |Works with the new getter/setter APIs (`event.set('[product][price]', 10)`)
|0.10      |0.10      |2.4.0 - 5.0.x   | 5.x.x |Not compatible with the 0.9 broker
|==========================================================

NOTE: It's a good idea to upgrade brokers before consumers/producers because brokers target backwards compatibility.
For example, the 0.9 broker will work with both the 0.8 consumer and 0.9 consumer APIs, but not the other way around.

Breaking change: This version also changes the default codec from json to plain

The Logstash Kafka consumer handles group management and uses the default offset management
strategy using Kafka topics.

Logstash instances by default form a single logical group to subscribe to Kafka topics
Each Logstash Kafka consumer can run multiple threads to increase read throughput. Alternatively,
you could run multiple Logstash instances with the same `group_id` to spread the load across
physical machines. Messages in a topic will be distributed to all Logstash instances with
the same `group_id`.

Ideally you should have as many threads as the number of partitions for a perfect balance --
more threads than partitions means that some threads will be idle

For more information see http://kafka.apache.org/documentation.html#theconsumer

Kafka consumer configuration: http://kafka.apache.org/documentation.html#consumerconfigs

This version also adds support for SSL/TLS security connection to Kafka. By default SSL is
disabled but can be turned on as needed.


&nbsp;

==== Synopsis

This plugin supports the following configuration options:

Required configuration options:

[source,json]
--------------------------
kafka {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-kafka-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-kafka-auto_commit_interval_ms>> |<<string,string>>|No|`"5000"`
| <<plugins-inputs-kafka-auto_offset_reset>> |<<string,string>>|No|
| <<plugins-inputs-kafka-bootstrap_servers>> |<<string,string>>|No|`"localhost:9092"`
| <<plugins-inputs-kafka-check_crcs>> |<<string,string>>|No|
| <<plugins-inputs-kafka-client_id>> |<<string,string>>|No|`"logstash"`
| <<plugins-inputs-kafka-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-kafka-connections_max_idle_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-consumer_threads>> |<<number,number>>|No|`1`
| <<plugins-inputs-kafka-decorate_events>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-kafka-enable_auto_commit>> |<<string,string>>|No|`"true"`
| <<plugins-inputs-kafka-enable_metric>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-kafka-exclude_internal_topics>> |<<string,string>>|No|
| <<plugins-inputs-kafka-fetch_max_wait_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-fetch_min_bytes>> |<<string,string>>|No|
| <<plugins-inputs-kafka-group_id>> |<<string,string>>|No|`"logstash"`
| <<plugins-inputs-kafka-heartbeat_interval_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-id>> |<<string,string>>|No|
| <<plugins-inputs-kafka-key_deserializer_class>> |<<string,string>>|No|`"org.apache.kafka.common.serialization.StringDeserializer"`
| <<plugins-inputs-kafka-max_partition_fetch_bytes>> |<<string,string>>|No|
| <<plugins-inputs-kafka-max_poll_records>> |<<string,string>>|No|
| <<plugins-inputs-kafka-metadata_max_age_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-partition_assignment_strategy>> |<<string,string>>|No|
| <<plugins-inputs-kafka-poll_timeout_ms>> |<<number,number>>|No|
| <<plugins-inputs-kafka-receive_buffer_bytes>> |<<string,string>>|No|
| <<plugins-inputs-kafka-reconnect_backoff_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-request_timeout_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-retry_backoff_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-send_buffer_bytes>> |<<string,string>>|No|
| <<plugins-inputs-kafka-session_timeout_ms>> |<<string,string>>|No|
| <<plugins-inputs-kafka-ssl>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-kafka-ssl_keystore_location>> |a valid filesystem path|No|
| <<plugins-inputs-kafka-ssl_keystore_password>> |<<password,password>>|No|
| <<plugins-inputs-kafka-ssl_truststore_location>> |a valid filesystem path|No|
| <<plugins-inputs-kafka-ssl_truststore_password>> |<<password,password>>|No|
| <<plugins-inputs-kafka-tags>> |<<array,array>>|No|
| <<plugins-inputs-kafka-topics>> |<<array,array>>|No|`["logstash"]`
| <<plugins-inputs-kafka-topics_pattern>> |<<string,string>>|No|
| <<plugins-inputs-kafka-type>> |<<string,string>>|No|
| <<plugins-inputs-kafka-value_deserializer_class>> |<<string,string>>|No|`"org.apache.kafka.common.serialization.StringDeserializer"`
|=======================================================================


==== Details

&nbsp;

[[plugins-inputs-kafka-add_field]]
===== `add_field`

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-kafka-auto_commit_interval_ms]]
===== `auto_commit_interval_ms`

  * Value type is <<string,string>>
  * Default value is `"5000"`

The frequency in milliseconds that the consumer offsets are committed to Kafka.

[[plugins-inputs-kafka-auto_offset_reset]]
===== `auto_offset_reset`

  * Value type is <<string,string>>
  * There is no default value for this setting.

What to do when there is no initial offset in Kafka or if an offset is out of range:

* earliest: automatically reset the offset to the earliest offset
* latest: automatically reset the offset to the latest offset
* none: throw exception to the consumer if no previous offset is found for the consumer's group
* anything else: throw exception to the consumer.

[[plugins-inputs-kafka-bootstrap_servers]]
===== `bootstrap_servers`

  * Value type is <<string,string>>
  * Default value is `"localhost:9092"`

A list of URLs to use for establishing the initial connection to the cluster.
This list should be in the form of `host1:port1,host2:port2` These urls are just used
for the initial connection to discover the full cluster membership (which may change dynamically)
so this list need not contain the full set of servers (you may want more than one, though, in
case a server is down).

[[plugins-inputs-kafka-check_crcs]]
===== `check_crcs`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk
corruption to the messages occurred. This check adds some overhead, so it may be
disabled in cases seeking extreme performance.

[[plugins-inputs-kafka-client_id]]
===== `client_id`

  * Value type is <<string,string>>
  * Default value is `"logstash"`

The id string to pass to the server when making requests. The purpose of this
is to be able to track the source of requests beyond just ip/port by allowing
a logical application name to be included.

[[plugins-inputs-kafka-codec]]
===== `codec`

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-kafka-connections_max_idle_ms]]
===== `connections_max_idle_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Close idle connections after the number of milliseconds specified by this config.

[[plugins-inputs-kafka-consumer_threads]]
===== `consumer_threads`

  * Value type is <<number,number>>
  * Default value is `1`

Ideally you should have as many threads as the number of partitions for a perfect
balance — more threads than partitions means that some threads will be idle

[[plugins-inputs-kafka-decorate_events]]
===== `decorate_events`

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Option to add Kafka metadata like topic, message size to the event.
This will add a field named `kafka` to the logstash event containing the following attributes:
  `topic`: The topic this message is associated with
  `consumer_group`: The consumer group used to read in this event
  `partition`: The partition this message is associated with
  `offset`: The offset from the partition this message is associated with
  `key`: A ByteBuffer containing the message key

[[plugins-inputs-kafka-enable_auto_commit]]
===== `enable_auto_commit`

  * Value type is <<string,string>>
  * Default value is `"true"`

If true, periodically commit to Kafka the offsets of messages already returned by the consumer.
This committed offset will be used when the process fails as the position from
which the consumption will begin.

[[plugins-inputs-kafka-enable_metric]]
===== `enable_metric`

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Disable or enable metric logging for this specific plugin instance
by default we record all the metrics we can, but you can disable metrics collection
for a specific plugin.

[[plugins-inputs-kafka-exclude_internal_topics]]
===== `exclude_internal_topics`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Whether records from internal topics (such as offsets) should be exposed to the consumer.
If set to true the only way to receive records from an internal topic is subscribing to it.

[[plugins-inputs-kafka-fetch_max_wait_ms]]
===== `fetch_max_wait_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The maximum amount of time the server will block before answering the fetch request if
there isn't sufficient data to immediately satisfy `fetch_min_bytes`. This
should be less than or equal to the timeout used in `poll_timeout_ms`

[[plugins-inputs-kafka-fetch_min_bytes]]
===== `fetch_min_bytes`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The minimum amount of data the server should return for a fetch request. If insufficient
data is available the request will wait for that much data to accumulate
before answering the request.

[[plugins-inputs-kafka-group_id]]
===== `group_id`

  * Value type is <<string,string>>
  * Default value is `"logstash"`

The identifier of the group this consumer belongs to. Consumer group is a single logical subscriber
that happens to be made up of multiple processors. Messages in a topic will be distributed to all
Logstash instances with the same `group_id`

[[plugins-inputs-kafka-heartbeat_interval_ms]]
===== `heartbeat_interval_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The expected time between heartbeats to the consumer coordinator. Heartbeats are used to ensure
that the consumer's session stays active and to facilitate rebalancing when new
consumers join or leave the group. The value must be set lower than
`session.timeout.ms`, but typically should be set no higher than 1/3 of that value.
It can be adjusted even lower to control the expected time for normal rebalances.

[[plugins-inputs-kafka-id]]
===== `id`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a unique `ID` to the plugin instance, this `ID` is used for tracking
information for a specific configuration of the plugin.

```
output {
 stdout {
   id => "ABC"
 }
}
```

If you don't explicitely set this variable Logstash will generate a unique name.

[[plugins-inputs-kafka-key_deserializer_class]]
===== `key_deserializer_class`

  * Value type is <<string,string>>
  * Default value is `"org.apache.kafka.common.serialization.StringDeserializer"`

Java Class used to deserialize the record's key

[[plugins-inputs-kafka-max_partition_fetch_bytes]]
===== `max_partition_fetch_bytes`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The maximum amount of data per-partition the server will return. The maximum total memory used for a
request will be <code>#partitions * max.partition.fetch.bytes</code>. This size must be at least
as large as the maximum message size the server allows or else it is possible for the producer to
send messages larger than the consumer can fetch. If that happens, the consumer can get stuck trying
to fetch a large message on a certain partition.

[[plugins-inputs-kafka-max_poll_records]]
===== `max_poll_records`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The maximum number of records returned in a single call to poll().

[[plugins-inputs-kafka-metadata_max_age_ms]]
===== `metadata_max_age_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The period of time in milliseconds after which we force a refresh of metadata even if
we haven't seen any partition leadership changes to proactively discover any new brokers or partitions

[[plugins-inputs-kafka-partition_assignment_strategy]]
===== `partition_assignment_strategy`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The class name of the partition assignment strategy that the client will use to distribute
partition ownership amongst consumer instances

[[plugins-inputs-kafka-poll_timeout_ms]]
===== `poll_timeout_ms`

  * Value type is <<number,number>>
  * There is no default value for this setting.

Time kafka consumer will wait to receive new messages from topics

[[plugins-inputs-kafka-receive_buffer_bytes]]
===== `receive_buffer_bytes`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The size of the TCP receive buffer (SO_RCVBUF) to use when reading data.

[[plugins-inputs-kafka-reconnect_backoff_ms]]
===== `reconnect_backoff_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The amount of time to wait before attempting to reconnect to a given host.
This avoids repeatedly connecting to a host in a tight loop.
This backoff applies to all requests sent by the consumer to the broker.

[[plugins-inputs-kafka-request_timeout_ms]]
===== `request_timeout_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The configuration controls the maximum amount of time the client will wait
for the response of a request. If the response is not received before the timeout
elapses the client will resend the request if necessary or fail the request if
retries are exhausted.

[[plugins-inputs-kafka-retry_backoff_ms]]
===== `retry_backoff_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The amount of time to wait before attempting to retry a failed fetch request
to a given topic partition. This avoids repeated fetching-and-failing in a tight loop.

[[plugins-inputs-kafka-send_buffer_bytes]]
===== `send_buffer_bytes`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The size of the TCP send buffer (SO_SNDBUF) to use when sending data

[[plugins-inputs-kafka-session_timeout_ms]]
===== `session_timeout_ms`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The timeout after which, if the `poll_timeout_ms` is not invoked, the consumer is marked dead
and a rebalance operation is triggered for the group identified by `group_id`

[[plugins-inputs-kafka-ssl]]
===== `ssl`

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Enable SSL/TLS secured communication to Kafka broker.

[[plugins-inputs-kafka-ssl_keystore_location]]
===== `ssl_keystore_location`

  * Value type is <<path,path>>
  * There is no default value for this setting.

If client authentication is required, this setting stores the keystore path.

[[plugins-inputs-kafka-ssl_keystore_password]]
===== `ssl_keystore_password`

  * Value type is <<password,password>>
  * There is no default value for this setting.

If client authentication is required, this setting stores the keystore password

[[plugins-inputs-kafka-ssl_truststore_location]]
===== `ssl_truststore_location`

  * Value type is <<path,path>>
  * There is no default value for this setting.

The JKS truststore path to validate the Kafka broker's certificate.

[[plugins-inputs-kafka-ssl_truststore_password]]
===== `ssl_truststore_password`

  * Value type is <<password,password>>
  * There is no default value for this setting.

The truststore password

[[plugins-inputs-kafka-tags]]
===== `tags`

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-kafka-topics]]
===== `topics`

  * Value type is <<array,array>>
  * Default value is `["logstash"]`

A list of topics to subscribe to, defaults to ["logstash"].

[[plugins-inputs-kafka-topics_pattern]]
===== `topics_pattern`

  * Value type is <<string,string>>
  * There is no default value for this setting.

A topic regex pattern to subscribe to.
The topics configuration will be ignored when using this configuration.

[[plugins-inputs-kafka-type]]
===== `type`

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.

[[plugins-inputs-kafka-value_deserializer_class]]
===== `value_deserializer_class`

  * Value type is <<string,string>>
  * Default value is `"org.apache.kafka.common.serialization.StringDeserializer"`

Java Class used to deserialize the record's value

