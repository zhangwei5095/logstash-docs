[[plugins-inputs-http]]
=== http



Using this input you can receive single or multiline events over http(s).
Applications can send a HTTP POST request with a body to the endpoint started by this
input and Logstash will convert it into an event for subsequent processing. Users 
can pass plain text, JSON, or any formatted data and use a corresponding codec with this
input. For Content-Type `application/json` the `json` codec is used, but for all other
data formats, `plain` codec is used.

This input can also be used to receive webhook requests to integrate with other services
and applications. By taking advantage of the vast plugin ecosystem available in Logstash
you can trigger actionable events right from your application.

==== Security
This plugin supports standard HTTP basic authentication headers to identify the requester.
You can pass in an username, password combination while sending data to this input

You can also setup SSL and send data securely over https, with an option of validating 
the client's certificate. Currently, the certificate setup is through 
https://docs.oracle.com/cd/E19509-01/820-3503/ggfen/index.html[Java Keystore 
format]


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
http {
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-http-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-http-additional_codecs>> |<<hash,hash>>|No|`{"application/json"=>"json"}`
| <<plugins-inputs-http-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-http-host>> |<<string,string>>|No|`"0.0.0.0"`
| <<plugins-inputs-http-keystore>> |a valid filesystem path|No|
| <<plugins-inputs-http-keystore_password>> |<<password,password>>|No|
| <<plugins-inputs-http-password>> |<<password,password>>|No|
| <<plugins-inputs-http-port>> |<<number,number>>|No|`8080`
| <<plugins-inputs-http-response_headers>> |<<hash,hash>>|No|`{"Content-Type"=>"text/plain"}`
| <<plugins-inputs-http-ssl>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-http-tags>> |<<array,array>>|No|
| <<plugins-inputs-http-threads>> |<<number,number>>|No|`4`
| <<plugins-inputs-http-type>> |<<string,string>>|No|
| <<plugins-inputs-http-user>> |<<string,string>>|No|
| <<plugins-inputs-http-verify_mode>> |<<string,string>>, one of `["none", "peer", "force_peer"]`|No|`"none"`
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-http-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-http-additional_codecs]]
===== `additional_codecs` 

  * Value type is <<hash,hash>>
  * Default value is `{"application/json"=>"json"}`

Apply specific codecs for specific content types.
The default codec will be applied only after this list is checked
and no codec for the request's content-type is found

[[plugins-inputs-http-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-http-host]]
===== `host` 

  * Value type is <<string,string>>
  * Default value is `"0.0.0.0"`

Codec used to decode the incoming data.
This codec will be used as a fall-back if the content-type
is not found in the "additional_codecs" hash
The host or ip to bind

[[plugins-inputs-http-keystore]]
===== `keystore` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

The JKS keystore to validate the client's certificates

[[plugins-inputs-http-keystore_password]]
===== `keystore_password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Set the truststore password

[[plugins-inputs-http-password]]
===== `password` 

  * Value type is <<password,password>>
  * There is no default value for this setting.

Password for basic authorization

[[plugins-inputs-http-port]]
===== `port` 

  * Value type is <<number,number>>
  * Default value is `8080`

The TCP port to bind to

[[plugins-inputs-http-response_headers]]
===== `response_headers` 

  * Value type is <<hash,hash>>
  * Default value is `{"Content-Type"=>"text/plain"}`

specify a custom set of response headers

[[plugins-inputs-http-ssl]]
===== `ssl` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

SSL Configurations

Enable SSL

[[plugins-inputs-http-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-http-threads]]
===== `threads` 

  * Value type is <<number,number>>
  * Default value is `4`

Maximum number of threads to use

[[plugins-inputs-http-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.

[[plugins-inputs-http-user]]
===== `user` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Username for basic authorization

[[plugins-inputs-http-verify_mode]]
===== `verify_mode` 

  * Value can be any of: `none`, `peer`, `force_peer`
  * Default value is `"none"`

Set the client certificate verification method. Valid methods: none, peer, force_peer


