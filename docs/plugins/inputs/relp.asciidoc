[[plugins-inputs-relp]]
=== relp


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/logstash-plugin install logstash-input-relp`.


Read RELP events over a TCP socket.

For more information about RELP, see
<http://www.rsyslog.com/doc/imrelp.html>

This protocol implements application-level acknowledgements to help protect
against message loss.

Message acks only function as far as messages being put into the queue for
filters; anything lost after that point will not be retransmitted

&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
relp {
    port => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-relp-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-relp-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-relp-host>> |<<string,string>>|No|`"0.0.0.0"`
| <<plugins-inputs-relp-port>> |<<number,number>>|Yes|
| <<plugins-inputs-relp-ssl_cacert>> |a valid filesystem path|No|
| <<plugins-inputs-relp-ssl_cert>> |a valid filesystem path|No|
| <<plugins-inputs-relp-ssl_enable>> |<<boolean,boolean>>|No|`false`
| <<plugins-inputs-relp-ssl_key>> |a valid filesystem path|No|
| <<plugins-inputs-relp-ssl_key_passphrase>> |<<password,password>>|No|`nil`
| <<plugins-inputs-relp-ssl_verify>> |<<boolean,boolean>>|No|`true`
| <<plugins-inputs-relp-tags>> |<<array,array>>|No|
| <<plugins-inputs-relp-type>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-relp-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-relp-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-relp-host]]
===== `host` 

  * Value type is <<string,string>>
  * Default value is `"0.0.0.0"`

The address to listen on.

[[plugins-inputs-relp-port]]
===== `port` 

  * This is a required setting.
  * Value type is <<number,number>>
  * There is no default value for this setting.

The port to listen on.

[[plugins-inputs-relp-ssl_cacert]]
===== `ssl_cacert` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

The SSL CA certificate, chainfile or CA path. The system CA path is automatically included.

[[plugins-inputs-relp-ssl_cert]]
===== `ssl_cert` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL certificate path

[[plugins-inputs-relp-ssl_enable]]
===== `ssl_enable` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Enable SSL (must be set for other `ssl_` options to take effect).

[[plugins-inputs-relp-ssl_key]]
===== `ssl_key` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

SSL key path

[[plugins-inputs-relp-ssl_key_passphrase]]
===== `ssl_key_passphrase` 

  * Value type is <<password,password>>
  * Default value is `nil`

SSL key passphrase

[[plugins-inputs-relp-ssl_verify]]
===== `ssl_verify` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Verify the identity of the other end of the SSL connection against the CA.
For input, sets the field `sslsubject` to that of the client certificate.

[[plugins-inputs-relp-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-relp-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


